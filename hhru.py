





import requests



def get_vacancies(text="python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", pages=2):

  """

  –ü–æ–ª—É—á–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ —Å hh.ru –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É.

  """

  all_descriptions = []



  for page in range(pages):

    response = requests.get("https://api.hh.ru/vacancies", params={

      "text": text,

      "area": 1, # –ú–æ—Å–∫–≤–∞

      "page": page,

      "per_page": 20

    })



    data = response.json()

    for vacancy in data['items']:

      vacancy_detail = requests.get(vacancy['url']).json()

      desc = vacancy_detail.get('description', '')

      all_descriptions.append(desc)



  return all_descriptions



import spacy

from collections import Counter



nlp = spacy.load("ru_core_news_md")



def extract_keywords(texts):

  """

  –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –≥–ª–∞–≥–æ–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞.

  """

  keywords = []



  for text in texts:

    doc = nlp(text)

    for token in doc:

      if token.pos_ in ["NOUN", "VERB"] and not token.is_stop:

        keywords.append(token.lemma_.lower())



  return Counter(keywords).most_common(50)



def compare_with_resume(resume_text, job_keywords):

  resume_doc = nlp(resume_text.lower())

  resume_tokens = {token.lemma_ for token in resume_doc if token.pos_ in ['NOUN', 'VERB']}



  present = []

  missing = []



  for word, freq in job_keywords:

    if word in resume_tokens:

      present.append((word, freq))

    else:

      missing.append((word, freq))



  return present, missing



if __name__ == "__main__":

  query = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫): ")

  print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π...")

  texts = get_vacancies(query, pages=2)



  print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤...")

  top_skills = extract_keywords(texts)



  print("üìÑ –í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ:")

  resume = ""

  while True:

    line = input()

    if not line.strip():

      break

    resume += line + "\n"



  present, missing = compare_with_resume(resume, top_skills)



  print("\n‚úÖ –ù–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å:")

  for skill, freq in present:

    print(f"{skill} (–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ {freq} –≤–∞–∫–∞–Ω—Å–∏—è—Ö)")



  print("\n‚ùå –ù–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç:")

  for skill, freq in missing:

    print(f"{skill} (–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ {freq} –≤–∞–∫–∞–Ω—Å–∏—è—Ö)")